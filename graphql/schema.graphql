# To really understand GraphQL, go to https://graphql.org/learn/

type Book {
  authors: [String!]
  cacheId: ID!
  id: ID!
  name: String
}

# It is necessary to generate input types for creating books
# ref: http://graphql.org/graphql-js/mutations-and-input-types/
input BookInput {
  authors: [String!]
  cacheId: ID
  id: ID
  name: String
}


type Product {
    Id: ID,
    Name: String,
    DepartmentId: String,
    CategoryId: ID,
    BrandId: ID,
    LinkId: String,
    RefId: String,
    IsVisible: Boolean,
    Description: String,
    DescriptionShort: String,
    ReleaseDate: String,
    KeyWords: String,
    Title: String,
    IsActive: Boolean,
    TaxCode: String,
    MetaTagDescription: String,
    SupplierId: ID,
    ShowWithoutStock: Boolean,
    AdWordsRemarketingCode: String,
    LomadeeCampaignCode: String,
    Score: String
}


input ProductInput {
  Name: String,
  Title: String,
  MetaTagDescription: String
}



type Query {
  # Cache control can only be set at root fields
  book(id: ID!): Book
  books(from: Int = 0, to: Int = 4): [Book] @cacheControl(scope: PUBLIC, maxAge: SHORT)
  total: Int

  """
  Returns a markdown source given an id
  """
  source(id: ID!): String
}

type Mutation {
  # You should always return the whole object in a mutation, not only a boolean. This will help in browser caching
  delete(id: String): Boolean
  editBook(id: ID!, book: BookInput!): Book
  newBook(book: BookInput!): Book
  editProduct(sku:String!,prod:ProductInput!):Product
}
